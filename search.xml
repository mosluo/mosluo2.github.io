<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[TensorFlow高效读取数据]]></title>
      <url>http://ycszen.github.io/2016/08/17/TensorFlow%E9%AB%98%E6%95%88%E8%AF%BB%E5%8F%96%E6%95%B0%E6%8D%AE/</url>
      <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p> 关于Tensorflow读取数据，官网给出了三种方法：</p>
<ul>
<li><strong>供给数据(Feeding)</strong>： 在TensorFlow程序运行的每一步， 让Python代码来供给数据。</li>
<li><strong>从文件读取数据</strong>： 在TensorFlow图的起始， 让一个输入管线从文件中读取数据。</li>
<li><strong>预加载数据</strong>： 在TensorFlow图中定义常量或变量来保存所有数据(仅适用于数据量比较小的情况)。</li>
</ul>
<p>对于数据量较小而言，可能一般选择直接将数据加载进内存，然后再分<code>batch</code>输入网络进行训练（tip:使用这种方法时，结合<code>yield</code> 使用更为简洁，大家自己尝试一下吧，我就不赘述了）。但是，如果数据量较大，这样的方法就不适用了，因为太耗内存，所以这时最好使用tensorflow提供的队列<code>queue</code>，也就是第二种方法 <strong>从文件读取数据</strong>。对于一些特定的读取，比如csv文件格式，官网有相关的描述，在这儿我介绍一种比较通用，高效的读取方法（官网介绍的少），即使用tensorflow内定标准格式——<code>TFRecords</code></p>
<p>太长不看，直接看源码请猛戳我的<a href="https://github.com/ycszen/tf_lab/blob/master/reading_data/example_tfrecords.py" target="_blank" rel="external">github</a></p>
<hr>
<h1 id="TFRecords"><a href="#TFRecords" class="headerlink" title="TFRecords"></a>TFRecords</h1><p>TFRecords其实是一种二进制文件，虽然它不如其他格式好理解，但是它能更好的利用内存，更方便复制和移动，并且不需要单独的标签文件（等会儿就知道为什么了）… …总而言之，这样的文件格式好处多多，所以让我们用起来吧。</p>
<p>TFRecords文件包含了<code>tf.train.Example</code> 协议内存块(protocol buffer)(协议内存块包含了字段 <code>Features</code>)。我们可以写一段代码获取你的数据， 将数据填入到<code>Example</code>协议内存块(protocol buffer)，将协议内存块序列化为一个字符串， 并且通过<code>tf.python_io.TFRecordWriter</code> 写入到TFRecords文件。</p>
<p>从TFRecords文件中读取数据， 可以使用<code>tf.TFRecordReader</code>的<code>tf.parse_single_example</code>解析器。这个操作可以将<code>Example</code>协议内存块(protocol buffer)解析为张量。</p>
<p>接下来，让我们开始读取数据之旅吧~</p>
<h1 id="生成TFRecords文件"><a href="#生成TFRecords文件" class="headerlink" title="生成TFRecords文件"></a>生成TFRecords文件</h1><p> 我们使用<code>tf.train.Example</code>来定义我们要填入的数据格式，然后使用<code>tf.python_io.TFRecordWriter</code>来写入。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> os</div><div class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf </div><div class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</div><div class="line"></div><div class="line">cwd = os.getcwd()</div><div class="line"></div><div class="line"><span class="string">'''</span></div><div class="line">此处我加载的数据目录如下：</div><div class="line">0 -- img1.jpg</div><div class="line">     img2.jpg</div><div class="line">     img3.jpg</div><div class="line">     ...</div><div class="line">1 -- img1.jpg</div><div class="line">     img2.jpg</div><div class="line">     ...</div><div class="line">2 -- ...</div><div class="line">...</div><div class="line">'''</div><div class="line">writer = tf.python_io.TFRecordWriter(<span class="string">"train.tfrecords"</span>)</div><div class="line"><span class="keyword">for</span> index, name <span class="keyword">in</span> enumerate(classes):</div><div class="line">    class_path = cwd + name + <span class="string">"/"</span></div><div class="line">    <span class="keyword">for</span> img_name <span class="keyword">in</span> os.listdir(class_path):</div><div class="line">        img_path = class_path + img_name</div><div class="line">            img = Image.open(img_path)</div><div class="line">            img = img.resize((<span class="number">224</span>, <span class="number">224</span>))</div><div class="line">        img_raw = img.tobytes()              <span class="comment">#将图片转化为原生bytes</span></div><div class="line">        example = tf.train.Example(features=tf.train.Features(feature=&#123;</div><div class="line">            <span class="string">"label"</span>: tf.train.Feature(int64_list=tf.train.Int64List(value=[index])),</div><div class="line">            <span class="string">'img_raw'</span>: tf.train.Feature(bytes_list=tf.train.BytesList(value=[img_raw]))</div><div class="line">        &#125;))</div><div class="line">        writer.write(example.SerializeToString())  <span class="comment">#序列化为字符串</span></div><div class="line">writer.close()</div></pre></td></tr></table></figure>
<p> 关于<code>Example</code> <code>Feature</code>的相关定义和详细内容，我推荐去官网查看相关API。</p>
<p>基本的，一个<code>Example</code>中包含<code>Features</code>，<code>Features</code>里包含<code>Feature</code>（这里没s）的字典。最后，<code>Feature</code>里包含有一个 <code>FloatList</code>， 或者<code>ByteList</code>，或者<code>Int64List</code></p>
<p> 就这样，我们把相关的信息都存到了一个文件中，所以前面才说不用单独的label文件。而且读取也很方便。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> serialized_example <span class="keyword">in</span> tf.python_io.tf_record_iterator(<span class="string">"train.tfrecords"</span>):</div><div class="line">    example = tf.train.Example()</div><div class="line">    example.ParseFromString(serialized_example)</div><div class="line"></div><div class="line">	image = example.features.feature[<span class="string">'image'</span>].bytes_list.value</div><div class="line">    label = example.features.feature[<span class="string">'label'</span>].int64_list.value</div><div class="line">    <span class="comment"># 可以做一些预处理之类的</span></div><div class="line">    <span class="keyword">print</span> image, label</div></pre></td></tr></table></figure>
<h1 id="使用队列读取"><a href="#使用队列读取" class="headerlink" title="使用队列读取"></a>使用队列读取</h1><p> 一旦生成了TFRecords文件，接下来就可以使用队列（<code>queue</code>）读取数据了。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">read_and_decode</span><span class="params">(filename)</span>:</span></div><div class="line">	<span class="comment">#根据文件名生成一个队列</span></div><div class="line">    filename_queue = tf.train.string_input_producer([filename])</div><div class="line"></div><div class="line">    reader = tf.TFRecordReader()</div><div class="line">    _, serialized_example = reader.read(filename_queue)   <span class="comment">#返回文件名和文件</span></div><div class="line">    features = tf.parse_single_example(serialized_example,</div><div class="line">                                       features=&#123;</div><div class="line">                                           <span class="string">'label'</span>: tf.FixedLenFeature([], tf.int64),</div><div class="line">                                           <span class="string">'img_raw'</span> : tf.FixedLenFeature([], tf.string),</div><div class="line">                                       &#125;)</div><div class="line"></div><div class="line">    img = tf.decode_raw(features[<span class="string">'img_raw'</span>], tf.uint8)</div><div class="line">    img = tf.reshape(img, [<span class="number">224</span>, <span class="number">224</span>, <span class="number">3</span>])</div><div class="line">    img = tf.cast(img, tf.float32) * (<span class="number">1.</span> / <span class="number">255</span>) - <span class="number">0.5</span></div><div class="line">    label = tf.cast(features[<span class="string">'label'</span>], tf.int32)</div><div class="line"></div><div class="line">    <span class="keyword">return</span> img, label</div></pre></td></tr></table></figure></p>
<p> 之后我们可以在训练的时候这样使用<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">img, label = read_and_decode(<span class="string">"train.tfrecords"</span>)</div><div class="line"></div><div class="line"><span class="comment"># 使用shuffle_batch可以随机打乱输入</span></div><div class="line">img_batch, label_batch = tf.train.shuffle_batch([img, label],</div><div class="line">                                                batch_size=<span class="number">30</span>, capacity=<span class="number">2000</span>,</div><div class="line">                                                min_after_dequeue=<span class="number">1000</span>)</div><div class="line">init = tf.initialize_all_variables()</div><div class="line"></div><div class="line"><span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess:</div><div class="line">    sess.run(init)</div><div class="line">    threads = tf.train.start_queue_runners(sess=sess)</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>):</div><div class="line">        val, l= sess.run([img_batch, label_batch])</div><div class="line">        <span class="comment">#我们也可以根据需要对val， l进行处理</span></div><div class="line">        <span class="comment">#l = to_categorical(l, 12) </span></div><div class="line">        print(val.shape, l)</div></pre></td></tr></table></figure></p>
<p> 至此，tensorflow高效从文件读取数据差不多完结了。</p>
<p> 恩？等等…什么叫差不多？对了，还有几个<strong>注意事项</strong>：</p>
<p> 第一，tensorflow里的graph能够记住状态（<code>state</code>），这使得<code>TFRecordReader</code>能够记住<code>tfrecord</code>的位置，并且始终能返回下一个。而这就要求我们在使用之前，必须初始化整个graph，这里我们使用了函数<code>tf.initialize_all_variables()</code>来进行初始化。</p>
<p>第二，tensorflow中的队列和普通的队列差不多，不过它里面的<code>operation</code>和<code>tensor</code>都是符号型的（<code>symbolic</code>），在调用<code>sess.run()</code>时才执行。</p>
<p> 第三， <code>TFRecordReader</code>会一直弹出队列中文件的名字，直到队列为空。</p>
<hr>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ol>
<li>生成tfrecord文件</li>
<li>定义<code>record reader</code>解析tfrecord文件</li>
<li>构造一个批生成器（<code>batcher</code>）</li>
<li>构建其他的操作</li>
<li>初始化所有的操作</li>
<li>启动<code>QueueRunner</code></li>
</ol>
<p><strong>例子代码请戳我的<a href="https://github.com/ycszen/tf_lab/blob/master/reading_data/example_tfrecords.py" target="_blank" rel="external">github</a>，如果觉得对你有帮助的话可以加个星哦。</strong></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>http://ycszen.github.io/2016/08/12/hello-world/</url>
      <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><a id="more"></a>
<h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[皮囊下的我]]></title>
      <url>http://ycszen.github.io/2016/08/12/%E7%9A%AE%E5%9B%8A%E4%B8%8B%E7%9A%84%E6%88%91/</url>
      <content type="html"><![CDATA[<p>原以为《皮囊》一书是一本地地道道的鸡汤文，所以并有太多读的欲望。但是，皮囊 二字却总是有着某种莫名的吸引力，在书店里时不时牵扯我的注意力。</p>
<p>昨晚，读完了此书。初读此书，正值刚读完《白鹿原》之际，看罢了原上的兴衰变迁，再看这一家人的起伏难免感觉有些小家子气。直至后来，看见“厚朴”之时内心更多的是对“黑狗达”的讥讽。一直到最后，一文结束，静思良久，才发现看到的，读到的更多是我，皮囊下的不是别人，正是我啊。</p>
<a id="more"></a>
<p>最开始觉得像自己的是厚朴，这个英译过来的名字，确实带着几分土气。这个永远充满激情，对生活充满热情的少年，和我是多么的相似。我们都曾无视他人看法的活着，都曾那样用力的活着。生命就此一次，不用来燃烧岂不是太浪费？在别人看来，我总是充满了正能量，像一颗小太阳；我总是肆无忌惮的大笑，像没有什么可以让我悲伤；我总是宣告着我一次次的计划，一次次的成就，就像我在不停的炫耀。有人不解，有人鄙视。就像厚朴告诉了大家自己名字的来源和“世界地图”之后，面对同学的窃窃私语，和指指点点，他从来是大步上前，勇敢面对，勾住对方的肩，大声说：“同学，对我感兴趣？咱俩聊聊”。我喜欢这样的生活态度，大多时候我也秉承着这样的生活方式，勇敢，义无反顾。</p>
<p>所以，在喜欢厚朴的同时，也累积着我对作者“黑狗达”的鄙夷。</p>
<p>黑狗达活得太现实了。他提醒厚朴别告诉别人名字的来源，因为他始终在意着别人的看法，在意别人会不会嘲笑，会不会对他产生不好的想法。现实已将他磨砺得有些市侩。但是，在我看来，他也在用力，虽然他一直不喜欢厚朴这样用力生活的方式，但是他一直却在这样做，只不过厚朴是用力的燃烧，而他是在用力的隐藏。甚至于到黑狗达评论厚朴和王子逸的爱情是互相利用时，我觉得这是他卑劣的想法，以己度人之下隐藏着对厚朴那样炽热生命的嫉妒。</p>
<p>所以，我不喜欢黑狗达，甚至于在写到小小的时候，这样的情绪就开始积蓄了。</p>
<p>当他在香港小小和赤脚军团之间平衡关系的时候，我就觉得他太精明了，心思太过深沉。当他开始拒绝香港小小的好意的时候，为了自己不被拖下水，这样对朋友未免显得有些残忍，当然他可能也没有把香港小小当作过朋友。这样的精明现实，让我感觉到他天生的无情冷漠残酷。</p>
<p>这样情绪的改变是在全书快结束的时候，黑狗达开始审视自己，回顾自己的生活轨迹，因为沉重的负担，不得不活得小心而现实。这时候，我对他产生了一些理解，而这样的理解才渐渐暴露出了皮囊下的我。这时候，我依然不喜欢黑狗达，同时也讨厌这另一个人——那就是我。</p>
<p>因为我在黑狗达身上找到了很多自己的影子。</p>
<p>因为其实我也是同样用力活着的人。</p>
<p>因为和黑狗达有着一些类似的人生经历：都是穷苦人家的孩子，我现在还记得五岁那年，父母联系上亲朋好友自己盖的房子，也是我们家现在的房子。当时，家里依然拮据，但是母亲硬气，就是要修。这样才在周围的亲戚乡邻中站起来了。正是因为我们都是这样的小孩，所以我们更加早熟，对生活对人生早早的有了自己的想法，对每一次选择都要比了又比，因为走错一步都会有代价。买错了东西，浪费了钱；走错了路，可能会错一辈子。所以，我们都活得格外小心，谨慎，精明，看得透；有着类似的生活轨迹：从小镇到县城到地级市，然后即将去往大城市。总在不断的变迁中，告别旧日好友，进入新的环境。习惯了一次次分别，也习惯了一次次接受新的环境。这样的经历让人快速成长，其实也只是快速麻木。就像我一直奢望我能成熟到平淡看待每一次离别，无论生离还是死别，但是每一次自己还是难过的像一个小孩，就像从来没有成长，更别谈成熟。成熟，果然是为了学会自欺欺人。所以，在这样的生活里，我们容易变得现实，变得会保护自己，变得会平衡关系，变得会对待他人，变得会委屈自己，变得会妥协现实。所以，我开始理解黑狗达，开始讨厌曾经的自己。</p>
<p>但是，我和黑狗达还是不一样的。他是一个恋家的人，但是我不是。小学在外婆叔姨家，中学在县城住校，有时候去小姨家，大学在陌生的省城住校。父母整日在外奔波，曾经修的房子没人住不算家。所以现在想想有时候会觉得自己没有归宿，就像无根的落叶不知道会飘向何处。但是，正是如此，我会更加珍惜自己周围有的一切，用力的爱自己周围的一切人。这样算下来，有父母的地方就算我的家，外婆家也是我的家，中学的学校也是我的家，大学也是我的家。我一直对别人说，我是一个喜欢闯荡的人，在一个地方待久了我会烦。但是，我知道这只是怕我自己没有了离开的勇气，停下了去追逐梦想的脚步。我想，某一天，我也会为某一个人停留，我们再一起好好经营一个家。</p>
<p>这就是我，皮囊下的我。就像黑狗达一样，我也会很现实，精明，对世事有自己的考量，拼命往前，用力去挣扎反抗；就像厚朴一样，我也会对生活爆发自己的热情，燃烧生命，尽力去喜欢，用力去活着；就像书展一样，我也喜欢对生活对人生进行各种规划，有着自己的想法，天真的以为自己“天命所归”。</p>
<p>谢谢你们，让我剖开皮囊，认真审视了我。</p>
]]></content>
    </entry>
    
  
  
</search>
